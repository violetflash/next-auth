// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  is_two_factor_enabled   Boolean                @default(false)
  two_factor_confirmation TwoFactorConfirmation?
  profile                 Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token]) // unique rule for the combination of email and token
}

// we don't reuse verification token. It is safer to keep them separated
model ResetPasswordToken {
  //
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token])
}

// we don't reuse verification token. It is safer to keep them separated
model TwoFactorAuthToken {
  //
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token])
}

// if user has 2FA he will able to login by this confirmation object
model TwoFactorConfirmation {
  id      String @id @default(cuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id])
}

model Profile {
  id            String   @id @default(cuid())
  user_id       String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  last_login_at DateTime

  @@unique([user_id])
}
